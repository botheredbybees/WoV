# docker-compose.yml
# This file defines the core local development environment for WoV,
# including essential Supabase services and your custom backend services.
# Advanced services like analytics, vector, and supavisor are excluded for simplicity.

services:
  # --- Core Supabase Services ---

  db:
    image: public.ecr.aws/supabase/postgres:17.4.1.068
    container_name: wov_supabase-db
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "54322:5432" # Host:Container - Connect to Postgres on host port 54322
    volumes:
      - db-data:/var/lib/postgresql/data # Persist database data
      - ./supabase/migrations:/docker-entrypoint-initdb.d/migrations # Mount your application migrations
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 60s
      timeout: 60s
      retries: 60

  kong:
    image: kong:3.4.2
    container_name: wov_supabase-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"  # Declarative mode only
      KONG_DECLARATIVE_CONFIG: "/opt/kong/declarative/kong.yml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_ANONYMOUS_REPORTS: "off"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"  

    volumes:
      - ./volumes/api/kong.yml:/opt/kong/declarative/kong.yml
    depends_on:
      db:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "nc", "-z", "localhost", "8025"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # healthcheck:
    #   disable: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/status || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 10



  auth:
    image: public.ecr.aws/supabase/gotrue:v2.177.0
    container_name: wov_supabase-auth
    restart: unless-stopped
    environment:
      GOTRUE_DB_DRIVER: "postgres"
      GOTRUE_DB_DATABASE: "db"
      GOTRUE_DB_HOST: "db"
      GOTRUE_DB_PORT: "5432"
      GOTRUE_DB_USER: ${POSTGRES_USER}
      GOTRUE_DB_PASSWORD: ${POSTGRES_PASSWORD}
      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_URL: "http://kong:8000/auth/v1" # Points to Kong
      GOTRUE_MAILER_URL: "http://inbucket:8025" # For email testing
      GOTRUE_DISABLE_SIGNUP: "${DISABLE_SIGNUP}"
      GOTRUE_URI_ALLOW_LIST: "${SITE_URL},http://localhost:8000" # Allow redirects from Studio/Kong
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "${ENABLE_EMAIL_SIGNUP}"
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: "${ENABLE_ANONYMOUS_USERS}"
      GOTRUE_MAILER_AUTOCONFIRM: "${ENABLE_EMAIL_AUTOCONFIRM}"
      GOTRUE_SMTP_ADMIN_EMAIL: "${SMTP_ADMIN_EMAIL}"
      GOTRUE_SMTP_HOST: "${SMTP_HOST}"
      GOTRUE_SMTP_PORT: "${SMTP_PORT}"
      GOTRUE_SMTP_USER: "${SMTP_USER}"
      GOTRUE_SMTP_PASS: "${SMTP_PASS}"
      GOTRUE_SMTP_SENDER_NAME: "${SMTP_SENDER_NAME}"
      GOTRUE_MAILER_URLPATHS_INVITE: "${MAILER_URLPATHS_INVITE}"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "${MAILER_URLPATHS_CONFIRMATION}"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "${MAILER_URLPATHS_RECOVERY}"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "${MAILER_URLPATHS_EMAIL_CHANGE}"
      GOTRUE_EXTERNAL_PHONE_ENABLED: "${ENABLE_PHONE_SIGNUP}"
      GOTRUE_SMS_AUTOCONFIRM: "${ENABLE_PHONE_AUTOCONFIRM}"
      API_EXTERNAL_URL: http://localhost:9999
      GOTRUE_DB_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
    depends_on:
      db:
        condition: service_healthy
      inbucket:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9999/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  storage:
    image: public.ecr.aws/supabase/storage-api:v1.26.0
    container_name: wov_supabase-storage
    restart: unless-stopped
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      FILE_SIZE_LIMIT: "1073741824" # 1GB
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      STORAGE_URL: "http://kong:8000/storage/v1" # Points to Kong
      WEBHOOK_URL: "http://exif-batcher:5000/webhook/file-upload" # For exif-batcher webhooks
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://image-proxy:5001 # Points to image-proxy service
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      POSTGRES_DATABASE_URL: ${SUPABASE_DB_URL}
      ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
    volumes:
      - storage-data:/var/lib/storage # Persist storage data
    depends_on:
      db:
        condition: service_healthy
      kong:
        condition: service_started
      image-proxy: # Depends on image-proxy for transformations
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  realtime:
    image: public.ecr.aws/supabase/realtime:v2.41.11
    container_name: wov_supabase-realtime
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      PORT: 5434
      RLIMIT_NOFILE: 1048576
      SECRET_KEY_BASE: ${SECRET_KEY_BASE} 
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgrest:
    image: public.ecr.aws/supabase/postgrest:v12.2.12
    container_name: wov_supabase-rest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      PGRST_DB_SCHEMA: ${PGRST_DB_SCHEMAS} # Uses schema from .env
      PGRST_DB_ANON_ROLE: ${PGRST_DB_ANON_ROLE} # Uses anon role from .env
      PGRST_JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  studio:
    image: public.ecr.aws/supabase/studio:2025.07.28-sha-578b707
    container_name: wov_supabase-studio
    restart: unless-stopped
    environment:
      SUPABASE_URL: "http://kong:8000" # Studio connects to Kong
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      PG_HOST: db
      PG_PORT: 5432
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_DATABASE: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    ports:
      - "54323:3000" # Access Studio on host port 54323
    depends_on:
      kong:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # inbucket:
  #   image: public.ecr.aws/supabase/mailpit:v1.22.3
  #   container_name: wov_supabase-inbucket
  #   restart: unless-stopped
  #   ports:
  #     - "54324:8025" # Web UI for Inbucket
  #     - "1025:1025" # SMTP port for Inbucket
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8025/ || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  inbucket:
    image: alpine
    command: ["sh", "-c", "while true; do sleep 30; done"]
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 10s
      timeout: 2s
      retries: 3



  edge-runtime:
    image: public.ecr.aws/supabase/edge-runtime:v1.68.3
    container_name: wov_supabase-edge-functions
    restart: unless-stopped
    environment:
      SUPABASE_URL: "http://kong:8000"
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      JWT_SECRET: ${JWT_SECRET}
      VERIFY_JWT: "false" # Set to false for easier local development
    ports:
      - "8081:8081"
    depends_on:
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/_internal/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Custom Backend Services ---

  # fastapi:
  #   build:
  #     context: ./backend/fastapi # Relative to this docker-compose.yml
  #     dockerfile: Dockerfile
  #   container_name: wov_fastapi
  #   restart: unless-stopped
  #   ports:
  #     - "8004:8003" # Host:Container - Your preferred host port for FastAPI
  #   environment:
      # DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # SUPABASE_URL: http://kong:8000
      # SUPABASE_ANON_KEY: ${ANON_KEY}
      # SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      # DB_HOST: db
      # DB_PORT: 5432
      # DB_NAME: ${POSTGRES_DB}
      # DB_USER: ${POSTGRES_USER}
      # DB_PASSWORD: ${POSTGRES_PASSWORD}
      # JWT_SECRET: ${JWT_SECRET}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     kong:
  #       condition: service_started
  #   command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8003", "--reload"]
  fastapi:
    build:
      context: ./backend/fastapi
      dockerfile: Dockerfile
    container_name: wov_fastapi
    restart: unless-stopped
    ports:
      - "8004:8003"
    env_file:
      - .env
    volumes:
      - ./backend/fastapi/uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
    command:
      - uvicorn
      - main:app
      - --host
      - "0.0.0.0"
      - --port
      - "8003"
      - --reload

  exif-batcher:
    build:
      context: ./backend/exif-batcher # Relative to this docker-compose.yml
      dockerfile: Dockerfile
    container_name: wov_exif-batcher
    restart: unless-stopped
    ports:
      - "5005:5000" # Host:Container - Your preferred host port for webhooks
    environment:
      SUPABASE_STORAGE_URL: http://storage:5000/storage/v1 # Internal Docker network name for storage
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SUPABASE_BUCKET: photo-uploads # Example bucket name
    depends_on:
      db:
        condition: service_healthy
      storage:
        condition: service_healthy
      kong:
        condition: service_started
    command: ["python", "/app/webhook_listener.py"] # Adjust to your main script

  image-proxy:
    build:
      context: ./backend/image-proxy # Relative to this docker-compose.yml
      dockerfile: Dockerfile
    container_name: wov_supabase-imgproxy
    restart: unless-stopped
    ports:
      - "5004:5001" # Host:Container - Your preferred host port
    environment:
      SUPABASE_STORAGE_URL: http://storage:5000/storage/v1 # Internal Docker network name for storage
      SUPABASE_ANON_KEY: ${ANON_KEY}
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: / # Assuming it accesses files from root of container
    # depends_on:
    #   storage:
    #     condition: service_healthy

  inaturalist-fetcher:
    build:
      context: ./backend/inaturalist-fetcher
      dockerfile: Dockerfile
    container_name: wov_inaturalist-fetcher
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      storage:
        condition: service_healthy

volumes:
  db-data:
  storage-data: # For Supabase Storage persistent datanetworks:
  supabase-network:
    driver: bridge
